---
# Feel free to add content and custom Front Matter to this file.
# To modify the layout, see https://jekyllrb.com/docs/themes/#overriding-theme-defaults

layout: home
---
The page is currently under construction. Instructions will become available real soon!

<center>
<img src="{{site.baseurl}}/assets/img/PCS.png" width="50%">
</center>

| Programming interface |
|-------|---------|
| `addDispatcher()` | Used for joining a new connector to Human Data Model framework. Connectors are small libraries that bridge various protocols and con- nectivity types and a Human Data Model framework instance. After this data via this connectivity can be dispatched to the framework if it has the input_data_type added. |
| `addInputHandler()` | Adds new input_data_type to a Human Data Model framework instance, and a handler method for processing immediately after the framework receives the raw input data. The instance only receives data types that are first added with this method. |
| `addSensationGenerator()` | Adds new output sensation type to Human Data Model framework, and a method for generating such sensations by accessing the data stored inside the model. Parameters are: sensation type name, an array of input data types that cause the generator to be called, interval in seconds  for how frequently the generator can be called, and valid time value indicating how long the generated sensation is stored in the model. (See Listing R. 1 for example). |
| `on()` | The method is called when sensation gets generated by Human Data Model. The parameters are sensation name and the method that is called when the sensation occurs. Within this scope the contents of the model can be accessed. |

| Perception of other model instances |
|------|------|
| `seed_broadcast` | The message contains the seed object containing the identifiers that the Human Data Model framework is permitted to publicly broadcast to other instances. |
| `seed_broadcast_reply` | This message is used as a notification, so that the broadcast sender can be sure which instances have received the seed. (Not all the connectivity types and protocols have a built-in support for making sure that the message has been delivered). |

| Injecting data to the framework with any protocol and connectivity |
|------|------|
| `input_data` | These messages contain the actual raw input data that Human Data Model framework is expected to handle. The message must have a key, that is, the input_data_type, and then the actual data in JSON format. Additionally, these messages contain authentication key that the software receives from Human Data Model once connected. |

{% highlight js %}
var bob = {
    username: "bob",
    identity: "bob@hdm",
    companionUUID: "FB694B90-F49E-4597-8306-171BBA78F844",
    facebookID: "102684690214746",
    devices: {
        "5BF2E050-4730-46DE-B6A7-2C8BE4D9FA36": "bob@iphoneSE",
        "8B034F7B-FA9B-540F-ACF3-88C0CA70C84F": "bob@ibeacon"
    }
};
{% endhighlight %}

{% highlight js %}
hdModel.addSensationGenerator(
    'social_proximity_set', ['proxemic_devices', 'facebook_friends'], 3, 5,
    function (theModel) {

        var sensation = {
            type: 'social_proximity_set',
            value: {
                friends: {}
            }
        };

        var user;
        for (user in theModel.proxemicUsers) {
            if (theModel.proxemicUsers.hasOwnProperty(user)) {
                if (Object.keys(theModel.facebookFriends).indexOf(user) !== -1) {
                    sensation.value.friends[user] = theModel.facebookFriends[user];
                }
            }
        }
        return sensation;
    }
);
{% endhighlight %}

{% highlight js %}
var currentSocialGraphMD5 = '';
hdModel.on('social_proximity_set', function (event) {

    if (currentSocialGraphMD5 !== event.md5 && hdModel.proxemicDevices) {
        currentSocialGraphMD5 = event.md5;

        $('.thegraph').fadeIn();

        updateProximityGraph(
            event.sender,
            hdModel.proxemicDevices
        );

    } else {

        $('.thegraph').fadeOut(5000);
    }
});
{% endhighlight %}
